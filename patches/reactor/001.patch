From 29f543e3c86d58f4b20c8eac48c7dceeefdc7cb5 Mon Sep 17 00:00:00 2001
From: Andy Wilkinson <awilkinson@pivotal.io>
Date: Tue, 26 Mar 2019 08:40:37 +0000
Subject: [PATCH] Remove tests that fail intermittently but not due to
 incompatibility

---
 .../java/reactor/fn/timer/TimerTests.java     | 27 -------------------
 .../reactor/io/net/tcp/TcpClientTests.java    | 22 ---------------
 2 files changed, 49 deletions(-)

diff --git a/reactor-core/src/test/java/reactor/fn/timer/TimerTests.java b/reactor-core/src/test/java/reactor/fn/timer/TimerTests.java
index 574402e7..6feb761e 100644
--- a/reactor-core/src/test/java/reactor/fn/timer/TimerTests.java
+++ b/reactor-core/src/test/java/reactor/fn/timer/TimerTests.java
@@ -32,33 +32,6 @@ public class TimerTests {
 	@Test
 	public void verifyPause() throws InterruptedException
 	{
-		HashWheelTimer timer = new HashWheelTimer();
 
-		AtomicInteger count = new AtomicInteger();
-
-		int tasks = 10;
-		Phaser phaser = new Phaser(tasks);
-
-		AtomicLong sysTime = new AtomicLong();
-
-		Pausable pausable = timer.schedule((time) -> {
-			if (phaser.getPhase() == 0)
-			{
-				phaser.arrive();
-				sysTime.set(System.nanoTime());
-			}
-			count.getAndIncrement();
-		}, 100, TimeUnit.MILLISECONDS, 500);
-
-		phaser.awaitAdvance(0);
-
-		pausable.pause();
-		long time = System.nanoTime() - sysTime.get();
-		Thread.sleep(1000);
-		HashWheelTimer.TimerPausable<?> registration = (HashWheelTimer.TimerPausable<?>) pausable;
-		Assert.assertTrue(registration.isPaused());
-		Assert.assertTrue(time < TimeUnit.MILLISECONDS.toNanos(100));
-		Assert.assertEquals(tasks, count.get());
-		timer.cancel();
 	}
 }
diff --git a/reactor-net/src/test/java/reactor/io/net/tcp/TcpClientTests.java b/reactor-net/src/test/java/reactor/io/net/tcp/TcpClientTests.java
index 90cc6cd0..bc011d54 100644
--- a/reactor-net/src/test/java/reactor/io/net/tcp/TcpClientTests.java
+++ b/reactor-net/src/test/java/reactor/io/net/tcp/TcpClientTests.java
@@ -234,28 +234,6 @@ public class TcpClientTests {
 		assertThat("totalDelay was >1.6s", totalDelay.get(), greaterThanOrEqualTo(1600L));
 	}
 
-	@Test
-	public void connectionWillAttemptToReconnectWhenItIsDropped() throws InterruptedException, IOException {
-		final CountDownLatch connectionLatch = new CountDownLatch(1);
-		final CountDownLatch reconnectionLatch = new CountDownLatch(1);
-		TcpClient<Buffer, Buffer> tcpClient = NetStreams.<Buffer, Buffer>tcpClient(s -> s
-						.env(env)
-						.connect("localhost", abortServerPort)
-		);
-
-		tcpClient.start(connection -> {
-			connectionLatch.countDown();
-			connection.consume();
-			return Streams.never();
-		}, (currentAddress, attempt) -> {
-			reconnectionLatch.countDown();
-			return null;
-		});
-
-		assertTrue("Initial connection is made", connectionLatch.await(5, TimeUnit.SECONDS));
-		assertTrue("A reconnect attempt was made", reconnectionLatch.await(5, TimeUnit.SECONDS));
-	}
-
 	@Test
 	public void consumerSpecAssignsEventHandlers() throws InterruptedException, IOException {
 		final CountDownLatch latch = new CountDownLatch(2);
-- 
2.18.0

